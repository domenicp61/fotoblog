#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline author:t broken-links:nil c:nil creator:nil
#+OPTIONS: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:t p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+OPTIONS: timestamp:t title:t toc:t todo:t |:t
#+TITLE: jekyllNotes
#+DATE: <2020-04-12 Sun>
#+AUTHOR: domenic pantalone
#+EMAIL: domenic.pantalone@gmail.com
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 26.3 (Org mode 9.2.1)

* Jekyll

** Pages
Pages are the most basic building block for content.

To add a page to the site
**** Simplest
- Add an HTML file in the project's root directory
- Add a Markdown file to the project's root diectory - the MD file will be converted to a HTML file.
**** Separate folders
Create separate folders under the project root
#+begin_example
south-america/
     |
     +-- peru
asia/
     |
     +-- japan/
         |
         +-- tokyo
         |
         +-- osaka
#+end_example
**** TODO What are permalinks

** Posts
Posts are found in the =_posts= folder

A post is a markdown file found under the =_posts= folder and is named as:
#+begin_example
YYYY-MM-DD-title.markdown
#+end_example

All blog posts files must begin with some yaml *Front Matter*.
At a minimum the following needs to be specified:
#+begin_example
---
layout: post
title: post title
---
#+end_example
*** Including Images
Create a common folder under the project root - usually names =assets= and places immages there.

e.g. =![image caption](/assets/images/image2.png)=
*** Displaying Posts
#+begin_src html
  <ul>
    {% for post in site.posts %}
    <li> <a href="{{ post.url }}">{{ post.title }}</li>
    {% endfor %}
  </ul>
#+end_src
** Liquid Templates
Jekyll uses Liquid as the templating engine.

Generally with Liquid you can:
- output content using two braces ={{ }}=
- perform statements by enclosing statements with liquid tag markers ={% %}=
*** Filters
For a complete list of filters see https://shopify.github.io/liquid/

Basically with filters you can
- perform conversions
  - dates
  - JSON
  - SCSS
- process lists

*** Liquid Tags
- comments
- control of flow
- iterations
- variables

**** Jekyll Tags
Jekyll have added the following specific new Liquid tag types
- include :: The =include= tag ={% include filename %}=. The file themselves will be found in the folder =_includes=
- include_relative :: see doco
The filename can be a variable
#+begin_example
title: page title
my_filename : include_filename.html
#+end_example
And to reference it
#+begin_example
{% if page.myfilename %}
  {% include {{ my_filename }} %}
{% endif %}
#+end_example


* Bootstrapping up a new jekyll project

** Jekyll and Bundle

See https://jekyllrb.com/tutorials/using-jekyll-with-bundler/

#+begin_quote
Bundle provides a consistent envirnment for Ruby projects by installing the exact gems and their respective versions
withing the project folder structure.
#+end_quote

*** Prerequisites
- Ruby
- Bundle
installed

*** Bootstrap up project
1. Create project base folder
#+begin_src sh
mkdir project-dir && cd project-dir
#+end_src
2. Initialise bundle
#+begin_src sh
# now ready to initialise bundle
bundle init
#+end_src
3. Configure bundle to install Ruby gems into project structure ='./vendor/bundle'=
#+begin_src sh
bundle config set path 'vendor/bundle'
#+end_src
4. Now add the jekyll gem to project
#+begin_src sh
bundle add jekyll
#+end_src
5. Create jekyll scallfolding
#+begin_src sh
# the --force is required the project folder is non-empty
bundle exec jekyll new --force --skip-bundle .
#+end_src
6. Add in missing gems from previous step
#+begin_src sh
bundle install
#+end_src

*** git ignore file
In order not to add the bundle gems to git repo
#+begin_src sh

cat > .gitignore <<EOF

# Ignore metadata generated by Jekyll
_site/
.sass-cache/
.jekyll-cache/
.jekyll-metadata

# Ignore folders generated by Bundler
.bundle/
vendor/
EOF

#+end_src

*** ready to serve

**** to start the web server
#+begin_src sh
bundler exec jekyll serve --watch --host 0.0.0.0
#+end_src


Now ready to load the first bootstapped jekyll page - visit http://localhost:4000


* To file

** Separating Posts

#+begin_example
_posts
   |
   +-- blog1
   |
   +-- blog2
#+end_example
Define a custom parameter that will indicate to Jekyll as to which post the blog belongs.
Front matter of post
#+begin_example
---
blog_category: blog2
---
#+end_example
